=== Participants : 3 ===
    
    Maxime Bittan - 3100294
    Redha Gouicem - 3100161
    Igor Macanovic- 3261753

=== Fichiers inclus ===
    
    [Ex. 1a] src/ex1a.c
    	     Programme qui prend en argument le nom d'un fichier et une chaine
	     de caractères et qui écrit la chaine dans le fichier, de manière
	     asynchrone, puis la lit de manière synchrone.
    
    [Ex. 1b] src/ex1b.c
    	     Même programme que le précédent, sauf que la fin de l'écriture est
	     attendue au moyen d'un appel à aio_suspend().
    
    [Ex. 2] src/ex2.c
    	    Même programme que le précédent sauf que cette fois-ci, on vérifie
	    toutes les 50ns si l'entrée sortie est terminée.

    [Ex. 3] src/ex3.c
    	    Même programme que l'exercice 4 du TME 6, sauf que cette fois, les
	    entrées sorties se font de manière asynchrone.

    [Ex. 4] src/ex4.c
    	    Programme qui lit un fichier par suite de 10 caracteres et qui
	    écrit ceux-ci dans un autre fichier, en inversant leur ordre.

    [Ex. 5] src/ex5.c
    	    Programme qui créé une chaine de N processus. Chaque processus
	    affiche son identité dans l'ordre inverse des créations.
    	      
    [Ex. 6] src/ex6.c
    	    Même programme que l'exercice 2 du TME 4 sauf que les valeurs
	    transmises par les fils passent par des signaux temps rééls.

    [Ex. 7] src/ex7.c
    	    Programme qui implante une barrière de N processus grace à des
	    signaux temps rééls.

=== Directives du Makefile ===

    ex1
	Créé l'exécutable ex1a et ex1b.

    ex2
	Créé l'exécutable ex2.

    ex3
	Créé l'exécutable ex3.

    ex4
	Créé l'exécutable ex4.   

    ex5
	Créé les exécutables ex5. 

    ex6
	Créé l'exécutable ex6.  

    ex7
	Créé l'exécutable ex7.

    pack
	Créé l'archive de soumission.

=== Etat d'avancement ===

    Exercice 1 : OK
    Exercice 2 : OK
    Exercice 3 : OK
    Exercice 4 : OK
    Exercice 5 : OK
    Exercice 6 : OK
    Exercice 7 : OK

=== Réponses ===

    [Ex. 3]
    	 Il est nécessaire de synchroniser le père et le fils, sinon on pourrait
	 lire avant que l'entrée sortie du fils ne soit terminée.
	 Cependant il n'est pas nécessaire de synchroniser les fils entre eux
	 car chaque fils écrit dans un endroit différent du fichier.

    [Ex. 7]
    	 Selon nous, il n'est pas possible de réaliser une telle synchronisation
	 sans coordinateur en n'utilisant que des signaux temps réél. A l'aide d'un
     mutex protégeant une variable pid_t pid dans wait_barrier(), il est 
     possible que chaque processus entrant dans la barrière laisse son pid au
     processus qui entrera après lui. Ce dernier fera de même, jusqu'au dernier
     qui, lui ne s'endormira pas mais réveillera son prédecesseur, qui fera de
     même et ainsi de suite.
